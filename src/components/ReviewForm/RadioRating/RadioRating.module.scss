/* stylelint-disable no-descending-specificity */
.container-box {
    display: flex;
    flex-direction: column;
    gap: var(--small-padding);
    width: fit-content;

    @include mobile {
        width: 100%;
    }
}

@mixin nth-child-checked($position: 0) {
    &:has(~ .value:nth-child(#{$position}) > input:checked) {
        @content;
    }
}

.container {
    display: flex;
    width: fit-content;
    padding: var(--small-padding);
    background-color: var(--secondary-gray-op-20);
    border-radius: 100px;
    transition: var(--item-transition-all);

    @include mobile {
        justify-content: space-between;
        width: 100%;
        padding: 4px;
        overflow-x: auto;
    }

    &.error {
        .value {
            --icon-stroke-color: var(--error-red);
        }
    }

    &:not(:hover, :has(.value:focus-visible)) {
        .value {
            @for $i from 1 through 3 {
                @include nth-child-checked($i) {
                    --icon-stroke-color: var(--error-red);
                    --icon-fill-color: var(--error-red);
                }
            }

            @for $i from 4 through 6 {
                @include nth-child-checked($i) {
                    --icon-stroke-color: var(--yellow);
                    --icon-fill-color: var(--yellow);
                }
            }

            @for $i from 7 through 10 {
                @include nth-child-checked($i) {
                    --icon-stroke-color: var(--success);
                    --icon-fill-color: var(--success);
                }
            }
        }
    }
}

@mixin nth-child-states($position: 0) {
    &:has(input:checked),
    &:focus-visible {
        &:nth-child(#{$position}) {
            @content;
        }
    }

    &:has(~ .value:nth-child(#{$position}):focus-visible) {
        @content;
    }

    @media (hover: hover) and (pointer: fine) {
        &:hover {
            &:nth-child(#{$position}) {
                @content;
            }
        }

        &:has(~ .value:nth-child(#{$position}):hover) {
            @content;
        }
    }
}

@mixin bad-mark {
    @for $i from 1 through 3 {
        @include nth-child-states($i) {
            @content;
        }
    }
}

@mixin average-mark {
    @for $i from 4 through 6 {
        @include nth-child-states($i) {
            @content;
        }
    }
}

@mixin good-mark {
    @for $i from 7 through 10 {
        @include nth-child-states($i) {
            @content;
        }
    }
}

.value {
    position: relative;
    padding: var(--item-padding);
    border-radius: 50%;
    cursor: pointer;
    transition: var(--item-transition-all);

    --radio-color: var(--secondary-gray);
    --icon-stroke-color: var(--secondary-gray);
    --icon-fill-color: transparent;

    @include text-button;

    svg {
        width: 24px;
        height: 24px;

        path {
            transition: var(--item-transition-all);
            fill: var(--icon-fill-color);
            stroke: var(--icon-stroke-color);
        }
    }

    @include mobile {
        padding: 2px;

        svg {
            width: 20px;
            height: 20px;
        }
    }

    input {
        position: absolute;
        width: 0;
        height: 0;
        margin: 0;
        border-width: 0;
        opacity: 0;
    }

    @include bad-mark {
        --icon-stroke-color: var(--error-red);
        --icon-fill-color: var(--error-red);
    }

    @include average-mark {
        --icon-stroke-color: var(--yellow);
        --icon-fill-color: var(--yellow);
    }

    @include good-mark {
        --icon-stroke-color: var(--success);
        --icon-fill-color: var(--success);
    }

    @include hover {
        background-color: var(--absolute-op-20);
    }

    &:active {
        transform: scale(0.99);
        opacity: 0.8;
    }
}
